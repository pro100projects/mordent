stages:
  - test
  - build
  - danger
  - release
  - publish-docker
  - cleanup

cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches
  key: "$CI_PROJECT_PATH"

test:
  image: amazoncorretto:17.0.6-alpine3.17
  stage: test
  only:
    - merge_requests
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
  script:
    - ./gradlew clean test --no-daemon
  artifacts:
    when: always
    reports:
      junit: build/test-results/test/**/TEST-*.xml
  coverage: '/    - Instruction Coverage: ([0-9.]+)%/'

build:
  image: amazoncorretto:17.0.6-alpine3.17
  stage: build
  only:
    - tags
    - merge_requests
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
  script:
    - ./gradlew build --no-daemon -x test
  artifacts:
    when: on_success
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - build

build-manual:
  image: amazoncorretto:17.0.6-alpine3.17
  stage: build
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
  script:
    - ./gradlew build --no-daemon -x test
  artifacts:
    when: on_success
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - build
  tags:
    - codeclimate
  when: manual

danger-review:
  image: node:latest
  stage: danger
  only:
    - merge_requests
  script:
    - npm install danger
    - npx danger ci --dangerfile Dangerfile.js --failOnErrors

semantic-release:
  image: node:latest
  stage: release
  except:
    - schedules
  only:
    refs:
      - main
      - pre-release
  script:
    - npm install -g semantic-release @semantic-release/gitlab @semantic-release/changelog @semantic-release/git @semantic-release/exec
    - npx semantic-release

publish-docker:
  image: docker:latest
  stage: publish-docker
  only:
    - tags
  needs:
    - build
  dependencies:
    - build
  tags:
    - codeclimate
  services:
    - docker:dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_TAG -f Prebuilt.Dockerfile .
    - docker tag $IMAGE_TAG $CI_REGISTRY_IMAGE:latest;
    - docker image push --all-tags $CI_REGISTRY_IMAGE
  when: on_success

publish-docker-manual:
  image: docker:latest
  stage: publish-docker
  needs:
    - build-manual
  dependencies:
    - build-manual
  tags:
    - codeclimate
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA -f Prebuilt.Dockerfile .
    - if [[ "$CI_OPEN_MERGE_REQUESTS" == "" ]]; then export IMAGE_TAG="${TAG:-latest}"; else export IMAGE_TAG="${TAG:-manual}"; fi
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:$IMAGE_TAG;
    - docker image push $CI_REGISTRY_IMAGE:$IMAGE_TAG
  when: on_success

cleanup:
  image: docker:stable
  stage: cleanup
  only:
    - tags
  before_script:
    - apk add --no-cache bash curl jq
    - chmod +x ./gitlab-job-artifact-cleanup.sh
  script: ./gitlab-job-artifact-cleanup.sh
