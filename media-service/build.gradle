import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.3'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.jetbrains.kotlin.jvm' version '1.8.21'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.8.21'
	id 'org.barfuin.gradle.jacocolog' version '2.0.0'
	id "com.gorylenko.gradle-git-properties" version "2.4.1"
}

group = 'com.mordent.ua'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

compileJava {
	options.compilerArgs = [
			'-Amapstruct.defaultComponentModel=spring'
	]
}

ext {
	set('testcontainersVersion', "1.17.6")
}

gitProperties {
	keys = ['git.branch', 'git.build.version','git.commit.id','git.commit.id.abbrev','git.commit.time']
	dateFormat = 'yyyy-MM-dd HH:mm:ss'
}

springBoot {
	buildInfo()
}

jar.enabled = false

dependencies {
	//kotlin
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'io.projectreactor.kotlin:reactor-kotlin-extensions'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
	implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'

	//springframework
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'

	//postgresql & flyway
	runtimeOnly 'org.postgresql:r2dbc-postgresql'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.springframework:spring-jdbc'

	//lombok
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'

	//mapstruct
	annotationProcessor 'org.mapstruct:mapstruct:1.5.2.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.2.Final'
	implementation 'org.mapstruct:mapstruct:1.5.2.Final'
	implementation 'org.mapstruct:mapstruct-processor:1.5.2.Final'

	//jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5', 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	//micrometer & zipkin
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
	implementation 'io.zipkin.reporter2:zipkin-reporter-brave'

	//logback
	implementation 'net.logstash.logback:logstash-logback-encoder:7.2'

	//for macos on arm64
	implementation 'io.netty:netty-resolver-dns-native-macos:4.1.89.Final:osx-aarch_64'

	//tests
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

kotlin {
	sourceSets {
		main {
			kotlin.srcDir('src/main/java')
			kotlin.srcDir('src/main/kotlin')
		}
		test {
			kotlin.srcDir('src/test/java')
			kotlin.srcDir('src/test/kotlin')
		}
	}

	tasks.withType(KotlinCompile).configureEach {
		kotlinOptions {
			freeCompilerArgs = ['-Xjsr305=strict']
			jvmTarget = '17'
		}
	}
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
}
