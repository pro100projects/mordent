version: '3.8'
name: 'mordent'

services:
  nginx:
    image: nginx
    container_name: nginx
    volumes:
      - ./volumes/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./volumes/nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - mordent-network

  frontend:
    image: registry.teamvoy.com/mordent/mordent-frontend:latest
    #image: mordent-frontend
    container_name: frontend
    ports:
      - '3000:3000'
    depends_on:
      - media-service
    networks:
      - mordent-network

  media-service:
    image: registry.teamvoy.com/mordent/media-service:latest
    #image: mordent-media-service
    container_name: media-service
    ports:
      - '8081:8081'
    depends_on:
      - auth-service
      - database
      - broker
      - zipkin
    links:
      - 'auth-service:auth-service'
      - 'database:database'
      - 'broker:broker'
      - 'zipkin:zipkin'
    environment:
      SPRING_PROFILES_ACTIVE: localDocker
    volumes:
      - mordent-files-storage:/static/files
    networks:
      - mordent-network

  auth-service:
    image: registry.teamvoy.com/mordent/auth-service:latest
    #image: mordent-auth-service
    container_name: auth-service
    ports:
      - '8080:8080'
    depends_on:
      - database
      - broker
      - zipkin
    links:
      - 'database:database'
      - 'broker:broker'
      - 'zipkin:zipkin'
    environment:
      SPRING_PROFILES_ACTIVE: localDocker
    networks:
      - mordent-network

  metadata-service:
    image: registry.teamvoy.com/mordent/metadata-service:latest
    #image: mordent-metadata-service
    container_name: metadata-service
    ports:
      - '8083:8083'
    depends_on:
      - mongo
      - broker
    links:
      - 'mongo:mongo'
      - 'broker:broker'
    environment:
      SPRING_PROFILES_ACTIVE: localDocker
    volumes:
      - mordent-files-storage:/static/files
    networks:
      - mordent-network

  notification-service:
    image: registry.teamvoy.com/mordent/notification-service:latest
    #image: mordent-notification-service
    container_name: notification-service
    ports:
      - '8082:8082'
    depends_on:
      - broker
    links:
      - 'broker:broker'
    environment:
      SPRING_PROFILES_ACTIVE: localDocker
    networks:
      - mordent-network

  database:
    image: postgres
    container_name: database
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: mordent
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - mordent-database:/var/lib/postgresql/data
    networks:
      - mordent-network

  mongo:
    image: mongo
    container_name: mongo
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_DATABASE: mordent
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    volumes:
      - mordent-mongodb:/data
    networks:
      - mordent-network

  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - mordent-network

  broker:
    image: confluentinc/cp-kafka
    container_name: broker
    ports:
      - '9092:9092'
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - mordent-network

  local-zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: local-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - mordent-network
    profiles:
      - local

  local-broker:
    image: confluentinc/cp-kafka
    container_name: local-broker
    ports:
      - '9092:9092'
    depends_on:
      - local-zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'local-zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - mordent-network
    profiles:
      - local

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - '9411:9411'
    networks:
      - mordent-network

#if "network mordent-network declared as external, but could not be found"
#start script "docker network create mordent-network"
networks:
  mordent-network:
    external: true
    driver: bridge
    name: mordent-network

volumes:
  #if "external volume "mordent-database" not found"
  #start script "docker volume create mordent-database"
  mordent-database:
    external: true
    name: mordent-database
  #if "external volume "mordent-mongodb" not found"
  #start script "docker volume create mordent-mongodb"
  mordent-mongodb:
    external: true
    name: mordent-mongodb
  #if "external volume "mordent-files-storage" not found"
  #start script "docker volume create mordent-files-storage"
  mordent-files-storage:
    external: true
    name: mordent-files-storage
